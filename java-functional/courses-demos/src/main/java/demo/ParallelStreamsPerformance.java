package demo;

import java.util.function.Function;
import java.util.stream.LongStream;
import java.util.stream.Stream;

/**
 Parallel programming can be tricky and sometimes counterintuitive.
 When misused (for example, using an operation that's not parallel-friendly, like iterate)
 it can actually worsen the overall performance of your programs, so it’s mandatory to understand
 what happens behind the scenes when you invoke that apparently magic parallel method.
<p></p>
 Turning a sequential stream into a parallel one is trivial but not always the right thing to do.
<p>
 Watch out for boxing. Automatic boxing and unboxing operations can dramatically
 hurt performance. Java 8 includes primitive streams (IntStream, LongStream, and DoubleStream)
 to avoid such operations, so use them when possible.
<p>
 Some operations naturally perform worse on a parallel stream than on a
 sequential stream. In particular, operations such as limit and findFirst that
 rely on the order of the elements are expensive in a parallel stream. For example,
 findAny will perform better than findFirst because it isn’t constrained to
 operate in the encounter order.
<p>
 Consider whether a terminal operation has a cheap or expensive merge step
 (for example, the combiner method in a Collector). If this is expensive, then
 the cost caused by the combination of the partial results generated by each substream
 can outweigh the performance benefits of a parallel stream.
 */
public class ParallelStreamsPerformance {

    public static void main(String[] args) {

        System.out.println("Sequential sum done in: " +
                measureSumPerf(ParallelStreamsPerformance::sequentialSum, 100_000_000) + " microseconds");

        System.out.println("Iterative sum done in: " +
                measureSumPerf(ParallelStreamsPerformance::iterativeSum, 100_000_000) + " microseconds");

        System.out.println("Ranged sum done in: " +
                measureSumPerf(ParallelStreamsPerformance::rangedSum, 100_000_000) + " microseconds");

        System.out.println("Side effect sum done in: " +
                measureSumPerf(ParallelStreamsPerformance::sideEffectSum, 100_000_000) + " microseconds");

        System.out.println("Parallel sum done in: " +
                measureSumPerf(ParallelStreamsPerformance::parallelSum, 100_000_000) + " microseconds" );

        System.out.println("Parallel range sum done in: " +
                measureSumPerf(ParallelStreamsPerformance::parallelRangedSum, 100_000_000) + " microseconds");

        System.out.println("Side effect parallel sum (wrong result) done in: " +
                measureSumPerf(ParallelStreamsPerformance::sideEffectParallelSum, 100_000_000) + " microseconds");

        timedSum();

    }

    public static long iterativeSum(long n) {
        long result = 0;
        for (long i = 0; i <= n; i++) {
            result += i;
        }
        return result;
    }

    public static long sequentialSum(long n) {
        return Stream.iterate(1L, i -> i + 1).limit(n).reduce(Long::sum)
                .orElseThrow(() -> new RuntimeException("Error at sequentialSum method"));
    }

    public static long parallelSum(long n) {
        return Stream.iterate(1L, i -> i + 1).limit(n).parallel().reduce(Long::sum)
                .orElseThrow(() -> new RuntimeException("Error at parallelSum method"));
    }

    public static long rangedSum(long n) {
        return LongStream.rangeClosed(1, n).reduce(Long::sum).getAsLong();
    }

    public static long parallelRangedSum(long n) {
        return LongStream.rangeClosed(1, n).parallel().reduce(Long::sum).getAsLong();
    }

    public static long sideEffectSum(long n) {
        Accumulator accumulator = new Accumulator();
        LongStream.rangeClosed(1, n).forEach(accumulator::add);
        return accumulator.total;
    }

    public static long sideEffectParallelSum(long n) {
        Accumulator accumulator = new Accumulator();
        LongStream.rangeClosed(1, n).parallel().forEach(accumulator::add);
        return accumulator.total;
    }

    public static long measureSumPerf(Function<Long, Long> adder, long n) {
        long fastest = Long.MAX_VALUE;
        for (int i = 0; i < 10; i++) {
            long start = System.nanoTime();
            long sum = adder.apply(n);
            long duration = (System.nanoTime() - start) / 1_000;
//            System.out.println("Result: " + sum);
            if (duration < fastest) fastest = duration;
        }
        return fastest;
    }

    /** Parallel streams
     *<br><br>
     * Normally, if we try a structured approach to a sum operation, a variable will change with each operation
     * so because it is constantly changing its state it can only run on a single core.<br>
     * By creating the stream, java can split that stream on multiple cores, performing sum it on each core and
     * finally joining all the sums in the end
     *
     */
    public static void timedSum() {
        long time = System.currentTimeMillis();
        System.out.println(LongStream.range(0, 2_000_000_000).sum());
        System.out.println(System.currentTimeMillis() - time);

        // we want to run it in parallel to use more than one CPU's core

        long time2 = System.currentTimeMillis();
        System.out.println(LongStream.range(0, 2_000_000_000).parallel().sum());
        System.out.println(System.currentTimeMillis() - time2);
    }

    public static class Accumulator {

        private long total = 0;

        public void add(long value) {
            total += value;
        }
    }
}
